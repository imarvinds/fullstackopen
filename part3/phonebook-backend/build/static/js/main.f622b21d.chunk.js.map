{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Persons.js","services/contactInfo.js","components/Notification.js","components/App.js","index.js"],"names":["Filter","props","onChange","handleChange","PersonForm","onSubmit","saveName","value","newName","handleNameChange","newNum","handleNumChange","type","Persons","persons","filter","person","name","toLowerCase","includes","searchQuery","map","key","number","onClick","event","preventDefault","deleteContact","id","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notification","message","error","className","App","useState","setPersons","setNewName","setNewNum","setSearchQuery","nmessage","setnMessage","ifError","setIfError","useEffect","contactInfoService","contacts","target","contactObject","length","find","p","found","window","confirm","updatedContact","setTimeout","catch","createdPerson","console","log","concat","contactToDelete","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f622b21d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Filter = (props) => {\r\n    return(\r\n        <div>\r\n            filter shown with <input onChange={props.handleChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter","import React from 'react';\r\n\r\nconst PersonForm = (props) =>{\r\n    return(\r\n        <form onSubmit={props.saveName}>\r\n            <div>\r\n                Name: <input value={props.newName} onChange={props.handleNameChange} />\r\n            </div>\r\n            <div>\r\n                Number: <input value={props.newNum} onChange={props.handleNumChange} />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PersonForm","import React from 'react';\r\n\r\nconst Persons = (props) =>{\r\n    return(\r\n        <form>\r\n            <div>\r\n                {props.persons.filter(person => person.name.toLowerCase().includes(props.searchQuery.toLowerCase())).map(person =>\r\n                    <div key={person.name}>{person.name} {person.number} <button onClick={(event)=>{event.preventDefault(); props.deleteContact(person.id)}}>delete</button></div>)}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Persons","import axios from 'axios'\r\nconst baseUrl = '/api/contacts' \r\n\r\n//baseURL = without backend '/persons' ; With backend '/api/contacts (for part 3)'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response =>{\r\n        return response.data\r\n    }) \r\n}\r\n\r\nconst create = (newObject) => {\r\n    return axios.post(baseUrl, newObject)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    return axios.put(`${baseUrl}/${id}`, newObject)\r\n}\r\n\r\nconst deleteContact = (id) => {\r\n    return axios.delete(`${baseUrl}/${id}`)\r\n}\r\n\r\nexport default { getAll, create, update, deleteContact }\r\n\r\n","import React from 'react'\r\n\r\nconst Notification = ({ message, error }) => {\r\n\r\n    if (message === null) {\r\n        return null\r\n    } else {\r\n        if (error) {\r\n            return (\r\n                <div className=\"error\">\r\n                    {message}\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div className=\"noti\">\r\n                    {message}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\r\nimport Filter from './Filter'\r\nimport PersonForm from './PersonForm'\r\nimport Persons from './Persons'\r\nimport contactInfoService from '../services/contactInfo'\r\nimport Notification from './Notification' \r\n\r\n\r\nconst App = () => {\r\n\r\n    const [persons, setPersons] = useState([])\r\n    const [newName, setNewName] = useState('')\r\n    const [newNum, setNewNum] = useState('')\r\n    const [searchQuery, setSearchQuery] = useState('') \r\n    const [nmessage, setnMessage] = useState(null)\r\n    const validNum = /^(?=.*[0-9])[- +()0-9]+$/\r\n    const [ifError, setIfError] = useState(null)\r\n\r\n    useEffect(() => {\r\n        contactInfoService\r\n            .getAll()\r\n            .then(contacts => {\r\n                setPersons(contacts)\r\n            })\r\n        }, [])\r\n\r\n    const saveName = (event) => {\r\n        event.preventDefault()\r\n        //if (validNum.test(newNum)) {\r\n\r\n            const contactObject = {\r\n                name: newName,\r\n                number: newNum,\r\n                id: persons.length + 1\r\n            }\r\n\r\n            //Edit contact\r\n            if (persons.find(p => p.name === newName)) {\r\n                let found = persons.find(p => p.name === newName)\r\n                let confirm = window.confirm(` ${newName} is already added to phonebook, replace old number with new one? `)\r\n                if (confirm) {\r\n                    const updatedContact = { ...found, number: newNum }\r\n                    contactInfoService\r\n                        .update(`${found.id}`, updatedContact)\r\n                        .then( response => { setPersons(persons.map(person => person.id !== found.id ? person : response.data)) \r\n                            setIfError(false)\r\n                            setnMessage(`Updated ${newName}`)\r\n                            \r\n                            setTimeout(() => {\r\n                                setnMessage(null)\r\n                            }, 5000) \r\n                            \r\n                            setNewName('')\r\n                            setNewNum('')\r\n\r\n                        })\r\n                        .catch(error => {\r\n                            setIfError(true)\r\n                            setnMessage(error.response.data.error)\r\n                            setTimeout(() => {\r\n                                setnMessage(null)\r\n                            }, 5000)\r\n                        })\r\n                }\r\n\r\n\r\n            } else {\r\n                contactInfoService\r\n                    .create(contactObject)\r\n                    .then(createdPerson => { \r\n                        console.log(createdPerson)\r\n                        setPersons(persons.concat(createdPerson.data))\r\n                        setIfError(false)\r\n                        setnMessage(`Added ${newName}`)\r\n                        setTimeout(() => {\r\n                            setnMessage(null)\r\n                        }, 5000)\r\n                        setNewName('')\r\n                        setNewNum('')\r\n                    })\r\n                    .catch(error => {\r\n                        // this is the way to access the error message\r\n                        setIfError(true)\r\n                        setnMessage(error.response.data.error)\r\n                        setTimeout(() => {\r\n                            setnMessage(null)\r\n                        }, 5000)\r\n                    \r\n                    })\r\n\r\n            }\r\n    \r\n    }    \r\n\r\n    const handleNameChange = (event) => {\r\n        setNewName(event.target.value)\r\n    }\r\n\r\n    const handleNumChange = (event) => {\r\n        setNewNum(event.target.value)\r\n    }\r\n\r\n    const handleFilterChange = (event) => {\r\n        setSearchQuery(event.target.value)\r\n    }\r\n\r\n    const deleteContact = (id) => {\r\n        const contactToDelete = persons.find(p => p.id === id) \r\n        let confirm = window.confirm(`Delete ${contactToDelete.name} ?`)\r\n        if (confirm) {\r\n            contactInfoService\r\n                .deleteContact(id)\r\n                .then(()=>{\r\n                    setPersons(persons.filter(p => p !== contactToDelete))\r\n                    setIfError(false)   \r\n                    setnMessage(`Deleted ${contactToDelete.name}`)\r\n                 \r\n                setTimeout(() => {\r\n                    setnMessage(null)\r\n                }, 5000)})\r\n                .catch(error => {\r\n                    setIfError(true)\r\n                    setnMessage(`Information of ${contactToDelete.name} has already been removed from the server.`)\r\n                    setTimeout(() => {\r\n                        setnMessage(null)\r\n                    }, 5000)\r\n                    setPersons(persons.filter(p => p !== contactToDelete))\r\n                })\r\n        } \r\n    }\r\n     \r\n    \r\n\r\n    return (\r\n        <div>\r\n            <h1>Phonebook</h1>\r\n\r\n            {     ifError === null  ? null\r\n                : ifError === true ? (<Notification message={nmessage} error={true} />)  \r\n                : ifError === false ? (<Notification message={nmessage} error={false} />) : null\r\n            }\r\n\r\n            <Filter handleChange={handleFilterChange}/>\r\n\r\n            <h3>Add a new</h3>\r\n\r\n            <PersonForm saveName={saveName} newName={newName} newNum={newNum} handleNameChange={handleNameChange} handleNumChange={handleNumChange}/>\r\n\r\n            <h3>Numbers</h3>\r\n\r\n            <Persons persons={persons} deleteContact={deleteContact} searchQuery={searchQuery}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport './index.css'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}